#ifndef CONFIG_HPP_
#define CONFIG_HPP_

//Macros
#define STR_H(x) #x     //Required for some reason
#define STR(x) STR_H(x)
//End macros



//Version info
#define VER_MAJOR 0
#define VER_MINOR 1
#define VER_BUILD 1

#define VERSION STR(VER_MAJOR) "." STR(VER_MINOR) "." STR(VER_BUILD)

#if defined(LIN)
#define PLAT "Linux"
#elif defined(MAC)
#define PLAT "Mac"
#elif defined(WIN)
#define PLAT "Windows"
#else
#define PLAT "Unknown platform"
#endif

#if defined(X64)
#define ARCH "x64_86"
#elif defined(X86)
#define ARCH "x86"
#else
#define ARCH "Unknown architecture"
#endif

#define SYSTEM PLAT " " ARCH
//End version info



//Platform specific stuff, because Windows wants to be special
#if defined(WIN)
#define NEWLINE "\r\n"
#define DIR_SEP "\\"
#else
#define NEWLINE "\n"
#define DIR_SEP "/"
#endif
//End Windows being special, also end of platform specific stuff



//Directory and file definitions
#define DIR_ROOT "." DIR_SEP

#define FILE_LOG    DIR_ROOT "warctic.log"
#define FILE_CONFIG DIR_ROOT "warctic.cfg"
//End directory and file definitions



//Other constants
#define MIN_WIN_HEIGHT 480

#define ASPECT_16_9  0x0A1609
#define ASPECT_16_10 0x0A1610
#define ASPECT_4_3   0x0A0403
//End other constants



#include <map>
#include <string>

#include "utils/String.hpp"
#include "misc/Singleton.hpp"
#include "misc/Types.hpp"

class Config : public Singleton<Config>
{
private:
	std::map<std::string, std::string> configMap;
	
	//Get and set config values
	int GetValueInt(std::string key)
	{
		if (GetKeyExists(key) && key[0] == 'i')
			return String::ToInt(configMap[key]);
		
		return 0;
	}
	
	void SetValueInt(std::string key, int val)
	{
		if (key[0] == 'i')
			configMap[key] = String::ToString(val);
	}
	
	bool GetValueBool(std::string key)
	{
		if (GetKeyExists(key) && key[0] == 'b')
			return String::ToBool(configMap[key]);
		
		return false;
	}
	
	void SetValueBool(std::string key, bool val)
	{
		if (key[0] == 'b')
			configMap[key] = String::ToString(val);
	}
	
public:
	std::map<std::string, std::string>* GetConfigMap() { return &configMap; }
	
	
	bool GetKeyExists(std::string key)
	{
		for (std::map<std::string, std::string>::iterator it = configMap.begin(); it != configMap.end(); it++)
		{
			if (it->first == key)
				return true;
		}
		
		return false;
	}
	
	uint GetLogLevelTerm() { return GetValueInt("iLogLevelTerm"); }
	void SetLogLevelTerm(uint level) { SetValueInt("iLogLevelTerm", level); }
	
	uint GetLogLevelFile() { return GetValueInt("iLogLevelFile"); }
	void SetLogLevelFile(uint level) { SetValueInt("iLogLevelFile", level); }
	
	bool GetLogTermColor() { return GetValueBool("bLogColor"); }
	void SetLogTermColor(bool color) { SetValueBool("bLogColor", color); }
	
	uint GetAspectRatio() { return GetValueInt("iDisplayAspectRatio"); }
	void SetAspectRatio(uint ratio) { SetValueInt("iDisplayAspectRatio", ratio); }
	
	bool GetFullscreen() { return GetValueBool("bDisplayFullscreen"); }
	void SetFullscreen(bool fs) { SetValueBool("bDisplayFullscreen", fs); }
	
	uint GetResolution() { return GetValueInt("iDisplayResolution"); }
	void SetResolution(uint resolution) { SetValueInt("iDisplayResolution", resolution); }
};

#endif
